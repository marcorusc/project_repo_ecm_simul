Grammatica

    0 $accept: translation_unit $end

    1 translation_unit: node_decl
    2                 | translation_unit node_decl

    3 node_decl: NODE IDENTIFIER '{' node_decl_item_list '}'
    4          | NODE IDENTIFIER '{' '}'
    5          | IDENTIFIER colon_comma expression term_opt

    6 colon_comma: ':'
    7            | ','

    8 node_decl_item_list: node_decl_item
    9                    | node_decl_item_list node_decl_item

   10 node_decl_item: IDENTIFIER '=' expression ';'
   11               | IDENTIFIER '=' STRING ';'

   12 primary_expression: IDENTIFIER
   13                   | '@' IDENTIFIER
   14                   | VARIABLE
   15                   | INTEGER
   16                   | DOUBLE
   17                   | '(' expression ')'

   18 postfix_expression: primary_expression
   19                   | IDENTIFIER '(' argument_expression_list ')'
   20                   | IDENTIFIER '(' ')'

   21 argument_expression_list: conditional_expression
   22                         | argument_expression_list ',' conditional_expression

   23 unary_expression: postfix_expression
   24                 | '+' unary_expression
   25                 | '-' unary_expression
   26                 | '!' unary_expression
   27                 | LOGNOT unary_expression

   28 multiplicative_expression: unary_expression
   29                          | multiplicative_expression '*' unary_expression
   30                          | multiplicative_expression '/' unary_expression

   31 additive_expression: multiplicative_expression
   32                    | additive_expression '+' multiplicative_expression
   33                    | additive_expression '-' multiplicative_expression

   34 relational_expression: additive_expression
   35                      | relational_expression '<' additive_expression
   36                      | relational_expression '>' additive_expression
   37                      | relational_expression LTEQ additive_expression
   38                      | relational_expression GTEQ additive_expression

   39 equality_expression: relational_expression
   40                    | equality_expression EQUAL relational_expression
   41                    | equality_expression NOT_EQUAL relational_expression

   42 logical_and_expression: equality_expression
   43                       | logical_and_expression LOGAND equality_expression

   44 logical_or_expression: logical_and_expression
   45                      | logical_or_expression LOGOR logical_and_expression

   46 logical_xor_expression: logical_or_expression
   47                       | logical_xor_expression LOGXOR logical_or_expression
   48                       | logical_xor_expression '^' logical_or_expression

   49 conditional_expression: logical_xor_expression
   50                       | logical_xor_expression '?' expression ':' conditional_expression

   51 expression: conditional_expression

   52 term_opt: %empty
   53         | ';'


Simboli terminali e regole in cui appaiono

    $end (0) 0
    '!' (33) 26
    '(' (40) 17 19 20
    ')' (41) 17 19 20
    '*' (42) 29
    '+' (43) 24 32
    ',' (44) 7 22
    '-' (45) 25 33
    '/' (47) 30
    ':' (58) 6 50
    ';' (59) 10 11 53
    '<' (60) 35
    '=' (61) 10 11
    '>' (62) 36
    '?' (63) 50
    '@' (64) 13
    '^' (94) 48
    '{' (123) 3 4
    '}' (125) 3 4
    error (256)
    IDENTIFIER <str> (258) 3 4 5 10 11 12 13 19 20
    VARIABLE <str> (259) 14
    STRING <str> (260) 11
    DOUBLE <d> (261) 16
    INTEGER <l> (262) 15
    LOGAND (263) 43
    LOGOR (264) 45
    LOGXOR (265) 47
    LOGNOT (266) 27
    EQUAL (267) 40
    NOT_EQUAL (268) 41
    NODE (269) 3 4
    GTEQ (270) 38
    LTEQ (271) 37


Simboli nonterminali e regole in cui appaiono

    $accept (35)
        on left: 0
    translation_unit (36)
        on left: 1 2
        on right: 0 2
    node_decl <node_decl> (37)
        on left: 3 4 5
        on right: 1 2
    colon_comma <str> (38)
        on left: 6 7
        on right: 5
    node_decl_item_list <node_decl_item_list> (39)
        on left: 8 9
        on right: 3 9
    node_decl_item <node_decl_item> (40)
        on left: 10 11
        on right: 8 9
    primary_expression <expr> (41)
        on left: 12 13 14 15 16 17
        on right: 18
    postfix_expression <expr> (42)
        on left: 18 19 20
        on right: 23
    argument_expression_list <arg_list> (43)
        on left: 21 22
        on right: 19 22
    unary_expression <expr> (44)
        on left: 23 24 25 26 27
        on right: 24 25 26 27 28 29 30
    multiplicative_expression <expr> (45)
        on left: 28 29 30
        on right: 29 30 31 32 33
    additive_expression <expr> (46)
        on left: 31 32 33
        on right: 32 33 34 35 36 37 38
    relational_expression <expr> (47)
        on left: 34 35 36 37 38
        on right: 35 36 37 38 39 40 41
    equality_expression <expr> (48)
        on left: 39 40 41
        on right: 40 41 42 43
    logical_and_expression <expr> (49)
        on left: 42 43
        on right: 43 44 45
    logical_or_expression <expr> (50)
        on left: 44 45
        on right: 45 46 47 48
    logical_xor_expression <expr> (51)
        on left: 46 47 48
        on right: 47 48 49 50
    conditional_expression <expr> (52)
        on left: 49 50
        on right: 21 22 50 51
    expression <expr> (53)
        on left: 51
        on right: 5 10 17 50
    term_opt (54)
        on left: 52 53
        on right: 5


Stato 0

    0 $accept: . translation_unit $end

    IDENTIFIER  shift e prosecuzione allo stato 1
    NODE        shift e prosecuzione allo stato 2

    translation_unit  prosecuzione allo stato 3
    node_decl         prosecuzione allo stato 4


Stato 1

    5 node_decl: IDENTIFIER . colon_comma expression term_opt

    ':'  shift e prosecuzione allo stato 5
    ','  shift e prosecuzione allo stato 6

    colon_comma  prosecuzione allo stato 7


Stato 2

    3 node_decl: NODE . IDENTIFIER '{' node_decl_item_list '}'
    4          | NODE . IDENTIFIER '{' '}'

    IDENTIFIER  shift e prosecuzione allo stato 8


Stato 3

    0 $accept: translation_unit . $end
    2 translation_unit: translation_unit . node_decl

    $end        shift e prosecuzione allo stato 9
    IDENTIFIER  shift e prosecuzione allo stato 1
    NODE        shift e prosecuzione allo stato 2

    node_decl  prosecuzione allo stato 10


Stato 4

    1 translation_unit: node_decl .

    $default  riduzione con la regola 1 (translation_unit)


Stato 5

    6 colon_comma: ':' .

    $default  riduzione con la regola 6 (colon_comma)


Stato 6

    7 colon_comma: ',' .

    $default  riduzione con la regola 7 (colon_comma)


Stato 7

    5 node_decl: IDENTIFIER colon_comma . expression term_opt

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 28
    logical_or_expression      prosecuzione allo stato 29
    logical_xor_expression     prosecuzione allo stato 30
    conditional_expression     prosecuzione allo stato 31
    expression                 prosecuzione allo stato 32


Stato 8

    3 node_decl: NODE IDENTIFIER . '{' node_decl_item_list '}'
    4          | NODE IDENTIFIER . '{' '}'

    '{'  shift e prosecuzione allo stato 33


Stato 9

    0 $accept: translation_unit $end .

    $default  accetta


Stato 10

    2 translation_unit: translation_unit node_decl .

    $default  riduzione con la regola 2 (translation_unit)


Stato 11

   12 primary_expression: IDENTIFIER .
   19 postfix_expression: IDENTIFIER . '(' argument_expression_list ')'
   20                   | IDENTIFIER . '(' ')'

    '('  shift e prosecuzione allo stato 34

    $default  riduzione con la regola 12 (primary_expression)


Stato 12

   14 primary_expression: VARIABLE .

    $default  riduzione con la regola 14 (primary_expression)


Stato 13

   16 primary_expression: DOUBLE .

    $default  riduzione con la regola 16 (primary_expression)


Stato 14

   15 primary_expression: INTEGER .

    $default  riduzione con la regola 15 (primary_expression)


Stato 15

   27 unary_expression: LOGNOT . unary_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression  prosecuzione allo stato 21
    postfix_expression  prosecuzione allo stato 22
    unary_expression    prosecuzione allo stato 35


Stato 16

   13 primary_expression: '@' . IDENTIFIER

    IDENTIFIER  shift e prosecuzione allo stato 36


Stato 17

   17 primary_expression: '(' . expression ')'

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 28
    logical_or_expression      prosecuzione allo stato 29
    logical_xor_expression     prosecuzione allo stato 30
    conditional_expression     prosecuzione allo stato 31
    expression                 prosecuzione allo stato 37


Stato 18

   24 unary_expression: '+' . unary_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression  prosecuzione allo stato 21
    postfix_expression  prosecuzione allo stato 22
    unary_expression    prosecuzione allo stato 38


Stato 19

   25 unary_expression: '-' . unary_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression  prosecuzione allo stato 21
    postfix_expression  prosecuzione allo stato 22
    unary_expression    prosecuzione allo stato 39


Stato 20

   26 unary_expression: '!' . unary_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression  prosecuzione allo stato 21
    postfix_expression  prosecuzione allo stato 22
    unary_expression    prosecuzione allo stato 40


Stato 21

   18 postfix_expression: primary_expression .

    $default  riduzione con la regola 18 (postfix_expression)


Stato 22

   23 unary_expression: postfix_expression .

    $default  riduzione con la regola 23 (unary_expression)


Stato 23

   28 multiplicative_expression: unary_expression .

    $default  riduzione con la regola 28 (multiplicative_expression)


Stato 24

   29 multiplicative_expression: multiplicative_expression . '*' unary_expression
   30                          | multiplicative_expression . '/' unary_expression
   31 additive_expression: multiplicative_expression .

    '*'  shift e prosecuzione allo stato 41
    '/'  shift e prosecuzione allo stato 42

    $default  riduzione con la regola 31 (additive_expression)


Stato 25

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   34 relational_expression: additive_expression .

    '+'  shift e prosecuzione allo stato 43
    '-'  shift e prosecuzione allo stato 44

    $default  riduzione con la regola 34 (relational_expression)


Stato 26

   35 relational_expression: relational_expression . '<' additive_expression
   36                      | relational_expression . '>' additive_expression
   37                      | relational_expression . LTEQ additive_expression
   38                      | relational_expression . GTEQ additive_expression
   39 equality_expression: relational_expression .

    GTEQ  shift e prosecuzione allo stato 45
    LTEQ  shift e prosecuzione allo stato 46
    '<'   shift e prosecuzione allo stato 47
    '>'   shift e prosecuzione allo stato 48

    $default  riduzione con la regola 39 (equality_expression)


Stato 27

   40 equality_expression: equality_expression . EQUAL relational_expression
   41                    | equality_expression . NOT_EQUAL relational_expression
   42 logical_and_expression: equality_expression .

    EQUAL      shift e prosecuzione allo stato 49
    NOT_EQUAL  shift e prosecuzione allo stato 50

    $default  riduzione con la regola 42 (logical_and_expression)


Stato 28

   43 logical_and_expression: logical_and_expression . LOGAND equality_expression
   44 logical_or_expression: logical_and_expression .

    LOGAND  shift e prosecuzione allo stato 51

    $default  riduzione con la regola 44 (logical_or_expression)


Stato 29

   45 logical_or_expression: logical_or_expression . LOGOR logical_and_expression
   46 logical_xor_expression: logical_or_expression .

    LOGOR  shift e prosecuzione allo stato 52

    $default  riduzione con la regola 46 (logical_xor_expression)


Stato 30

   47 logical_xor_expression: logical_xor_expression . LOGXOR logical_or_expression
   48                       | logical_xor_expression . '^' logical_or_expression
   49 conditional_expression: logical_xor_expression .
   50                       | logical_xor_expression . '?' expression ':' conditional_expression

    LOGXOR  shift e prosecuzione allo stato 53
    '^'     shift e prosecuzione allo stato 54
    '?'     shift e prosecuzione allo stato 55

    $default  riduzione con la regola 49 (conditional_expression)


Stato 31

   51 expression: conditional_expression .

    $default  riduzione con la regola 51 (expression)


Stato 32

    5 node_decl: IDENTIFIER colon_comma expression . term_opt

    ';'  shift e prosecuzione allo stato 56

    $default  riduzione con la regola 52 (term_opt)

    term_opt  prosecuzione allo stato 57


Stato 33

    3 node_decl: NODE IDENTIFIER '{' . node_decl_item_list '}'
    4          | NODE IDENTIFIER '{' . '}'

    IDENTIFIER  shift e prosecuzione allo stato 58
    '}'         shift e prosecuzione allo stato 59

    node_decl_item_list  prosecuzione allo stato 60
    node_decl_item       prosecuzione allo stato 61


Stato 34

   19 postfix_expression: IDENTIFIER '(' . argument_expression_list ')'
   20                   | IDENTIFIER '(' . ')'

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    ')'         shift e prosecuzione allo stato 62
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    argument_expression_list   prosecuzione allo stato 63
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 28
    logical_or_expression      prosecuzione allo stato 29
    logical_xor_expression     prosecuzione allo stato 30
    conditional_expression     prosecuzione allo stato 64


Stato 35

   27 unary_expression: LOGNOT unary_expression .

    $default  riduzione con la regola 27 (unary_expression)


Stato 36

   13 primary_expression: '@' IDENTIFIER .

    $default  riduzione con la regola 13 (primary_expression)


Stato 37

   17 primary_expression: '(' expression . ')'

    ')'  shift e prosecuzione allo stato 65


Stato 38

   24 unary_expression: '+' unary_expression .

    $default  riduzione con la regola 24 (unary_expression)


Stato 39

   25 unary_expression: '-' unary_expression .

    $default  riduzione con la regola 25 (unary_expression)


Stato 40

   26 unary_expression: '!' unary_expression .

    $default  riduzione con la regola 26 (unary_expression)


Stato 41

   29 multiplicative_expression: multiplicative_expression '*' . unary_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression  prosecuzione allo stato 21
    postfix_expression  prosecuzione allo stato 22
    unary_expression    prosecuzione allo stato 66


Stato 42

   30 multiplicative_expression: multiplicative_expression '/' . unary_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression  prosecuzione allo stato 21
    postfix_expression  prosecuzione allo stato 22
    unary_expression    prosecuzione allo stato 67


Stato 43

   32 additive_expression: additive_expression '+' . multiplicative_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 68


Stato 44

   33 additive_expression: additive_expression '-' . multiplicative_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 69


Stato 45

   38 relational_expression: relational_expression GTEQ . additive_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 70


Stato 46

   37 relational_expression: relational_expression LTEQ . additive_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 71


Stato 47

   35 relational_expression: relational_expression '<' . additive_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 72


Stato 48

   36 relational_expression: relational_expression '>' . additive_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 73


Stato 49

   40 equality_expression: equality_expression EQUAL . relational_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 74


Stato 50

   41 equality_expression: equality_expression NOT_EQUAL . relational_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 75


Stato 51

   43 logical_and_expression: logical_and_expression LOGAND . equality_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 76


Stato 52

   45 logical_or_expression: logical_or_expression LOGOR . logical_and_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 77


Stato 53

   47 logical_xor_expression: logical_xor_expression LOGXOR . logical_or_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 28
    logical_or_expression      prosecuzione allo stato 78


Stato 54

   48 logical_xor_expression: logical_xor_expression '^' . logical_or_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 28
    logical_or_expression      prosecuzione allo stato 79


Stato 55

   50 conditional_expression: logical_xor_expression '?' . expression ':' conditional_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 28
    logical_or_expression      prosecuzione allo stato 29
    logical_xor_expression     prosecuzione allo stato 30
    conditional_expression     prosecuzione allo stato 31
    expression                 prosecuzione allo stato 80


Stato 56

   53 term_opt: ';' .

    $default  riduzione con la regola 53 (term_opt)


Stato 57

    5 node_decl: IDENTIFIER colon_comma expression term_opt .

    $default  riduzione con la regola 5 (node_decl)


Stato 58

   10 node_decl_item: IDENTIFIER . '=' expression ';'
   11               | IDENTIFIER . '=' STRING ';'

    '='  shift e prosecuzione allo stato 81


Stato 59

    4 node_decl: NODE IDENTIFIER '{' '}' .

    $default  riduzione con la regola 4 (node_decl)


Stato 60

    3 node_decl: NODE IDENTIFIER '{' node_decl_item_list . '}'
    9 node_decl_item_list: node_decl_item_list . node_decl_item

    IDENTIFIER  shift e prosecuzione allo stato 58
    '}'         shift e prosecuzione allo stato 82

    node_decl_item  prosecuzione allo stato 83


Stato 61

    8 node_decl_item_list: node_decl_item .

    $default  riduzione con la regola 8 (node_decl_item_list)


Stato 62

   20 postfix_expression: IDENTIFIER '(' ')' .

    $default  riduzione con la regola 20 (postfix_expression)


Stato 63

   19 postfix_expression: IDENTIFIER '(' argument_expression_list . ')'
   22 argument_expression_list: argument_expression_list . ',' conditional_expression

    ','  shift e prosecuzione allo stato 84
    ')'  shift e prosecuzione allo stato 85


Stato 64

   21 argument_expression_list: conditional_expression .

    $default  riduzione con la regola 21 (argument_expression_list)


Stato 65

   17 primary_expression: '(' expression ')' .

    $default  riduzione con la regola 17 (primary_expression)


Stato 66

   29 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $default  riduzione con la regola 29 (multiplicative_expression)


Stato 67

   30 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $default  riduzione con la regola 30 (multiplicative_expression)


Stato 68

   29 multiplicative_expression: multiplicative_expression . '*' unary_expression
   30                          | multiplicative_expression . '/' unary_expression
   32 additive_expression: additive_expression '+' multiplicative_expression .

    '*'  shift e prosecuzione allo stato 41
    '/'  shift e prosecuzione allo stato 42

    $default  riduzione con la regola 32 (additive_expression)


Stato 69

   29 multiplicative_expression: multiplicative_expression . '*' unary_expression
   30                          | multiplicative_expression . '/' unary_expression
   33 additive_expression: additive_expression '-' multiplicative_expression .

    '*'  shift e prosecuzione allo stato 41
    '/'  shift e prosecuzione allo stato 42

    $default  riduzione con la regola 33 (additive_expression)


Stato 70

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   38 relational_expression: relational_expression GTEQ additive_expression .

    '+'  shift e prosecuzione allo stato 43
    '-'  shift e prosecuzione allo stato 44

    $default  riduzione con la regola 38 (relational_expression)


Stato 71

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   37 relational_expression: relational_expression LTEQ additive_expression .

    '+'  shift e prosecuzione allo stato 43
    '-'  shift e prosecuzione allo stato 44

    $default  riduzione con la regola 37 (relational_expression)


Stato 72

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   35 relational_expression: relational_expression '<' additive_expression .

    '+'  shift e prosecuzione allo stato 43
    '-'  shift e prosecuzione allo stato 44

    $default  riduzione con la regola 35 (relational_expression)


Stato 73

   32 additive_expression: additive_expression . '+' multiplicative_expression
   33                    | additive_expression . '-' multiplicative_expression
   36 relational_expression: relational_expression '>' additive_expression .

    '+'  shift e prosecuzione allo stato 43
    '-'  shift e prosecuzione allo stato 44

    $default  riduzione con la regola 36 (relational_expression)


Stato 74

   35 relational_expression: relational_expression . '<' additive_expression
   36                      | relational_expression . '>' additive_expression
   37                      | relational_expression . LTEQ additive_expression
   38                      | relational_expression . GTEQ additive_expression
   40 equality_expression: equality_expression EQUAL relational_expression .

    GTEQ  shift e prosecuzione allo stato 45
    LTEQ  shift e prosecuzione allo stato 46
    '<'   shift e prosecuzione allo stato 47
    '>'   shift e prosecuzione allo stato 48

    $default  riduzione con la regola 40 (equality_expression)


Stato 75

   35 relational_expression: relational_expression . '<' additive_expression
   36                      | relational_expression . '>' additive_expression
   37                      | relational_expression . LTEQ additive_expression
   38                      | relational_expression . GTEQ additive_expression
   41 equality_expression: equality_expression NOT_EQUAL relational_expression .

    GTEQ  shift e prosecuzione allo stato 45
    LTEQ  shift e prosecuzione allo stato 46
    '<'   shift e prosecuzione allo stato 47
    '>'   shift e prosecuzione allo stato 48

    $default  riduzione con la regola 41 (equality_expression)


Stato 76

   40 equality_expression: equality_expression . EQUAL relational_expression
   41                    | equality_expression . NOT_EQUAL relational_expression
   43 logical_and_expression: logical_and_expression LOGAND equality_expression .

    EQUAL      shift e prosecuzione allo stato 49
    NOT_EQUAL  shift e prosecuzione allo stato 50

    $default  riduzione con la regola 43 (logical_and_expression)


Stato 77

   43 logical_and_expression: logical_and_expression . LOGAND equality_expression
   45 logical_or_expression: logical_or_expression LOGOR logical_and_expression .

    LOGAND  shift e prosecuzione allo stato 51

    $default  riduzione con la regola 45 (logical_or_expression)


Stato 78

   45 logical_or_expression: logical_or_expression . LOGOR logical_and_expression
   47 logical_xor_expression: logical_xor_expression LOGXOR logical_or_expression .

    LOGOR  shift e prosecuzione allo stato 52

    $default  riduzione con la regola 47 (logical_xor_expression)


Stato 79

   45 logical_or_expression: logical_or_expression . LOGOR logical_and_expression
   48 logical_xor_expression: logical_xor_expression '^' logical_or_expression .

    LOGOR  shift e prosecuzione allo stato 52

    $default  riduzione con la regola 48 (logical_xor_expression)


Stato 80

   50 conditional_expression: logical_xor_expression '?' expression . ':' conditional_expression

    ':'  shift e prosecuzione allo stato 86


Stato 81

   10 node_decl_item: IDENTIFIER '=' . expression ';'
   11               | IDENTIFIER '=' . STRING ';'

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    STRING      shift e prosecuzione allo stato 87
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 28
    logical_or_expression      prosecuzione allo stato 29
    logical_xor_expression     prosecuzione allo stato 30
    conditional_expression     prosecuzione allo stato 31
    expression                 prosecuzione allo stato 88


Stato 82

    3 node_decl: NODE IDENTIFIER '{' node_decl_item_list '}' .

    $default  riduzione con la regola 3 (node_decl)


Stato 83

    9 node_decl_item_list: node_decl_item_list node_decl_item .

    $default  riduzione con la regola 9 (node_decl_item_list)


Stato 84

   22 argument_expression_list: argument_expression_list ',' . conditional_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 28
    logical_or_expression      prosecuzione allo stato 29
    logical_xor_expression     prosecuzione allo stato 30
    conditional_expression     prosecuzione allo stato 89


Stato 85

   19 postfix_expression: IDENTIFIER '(' argument_expression_list ')' .

    $default  riduzione con la regola 19 (postfix_expression)


Stato 86

   50 conditional_expression: logical_xor_expression '?' expression ':' . conditional_expression

    IDENTIFIER  shift e prosecuzione allo stato 11
    VARIABLE    shift e prosecuzione allo stato 12
    DOUBLE      shift e prosecuzione allo stato 13
    INTEGER     shift e prosecuzione allo stato 14
    LOGNOT      shift e prosecuzione allo stato 15
    '@'         shift e prosecuzione allo stato 16
    '('         shift e prosecuzione allo stato 17
    '+'         shift e prosecuzione allo stato 18
    '-'         shift e prosecuzione allo stato 19
    '!'         shift e prosecuzione allo stato 20

    primary_expression         prosecuzione allo stato 21
    postfix_expression         prosecuzione allo stato 22
    unary_expression           prosecuzione allo stato 23
    multiplicative_expression  prosecuzione allo stato 24
    additive_expression        prosecuzione allo stato 25
    relational_expression      prosecuzione allo stato 26
    equality_expression        prosecuzione allo stato 27
    logical_and_expression     prosecuzione allo stato 28
    logical_or_expression      prosecuzione allo stato 29
    logical_xor_expression     prosecuzione allo stato 30
    conditional_expression     prosecuzione allo stato 90


Stato 87

   11 node_decl_item: IDENTIFIER '=' STRING . ';'

    ';'  shift e prosecuzione allo stato 91


Stato 88

   10 node_decl_item: IDENTIFIER '=' expression . ';'

    ';'  shift e prosecuzione allo stato 92


Stato 89

   22 argument_expression_list: argument_expression_list ',' conditional_expression .

    $default  riduzione con la regola 22 (argument_expression_list)


Stato 90

   50 conditional_expression: logical_xor_expression '?' expression ':' conditional_expression .

    $default  riduzione con la regola 50 (conditional_expression)


Stato 91

   11 node_decl_item: IDENTIFIER '=' STRING ';' .

    $default  riduzione con la regola 11 (node_decl_item)


Stato 92

   10 node_decl_item: IDENTIFIER '=' expression ';' .

    $default  riduzione con la regola 10 (node_decl_item)
